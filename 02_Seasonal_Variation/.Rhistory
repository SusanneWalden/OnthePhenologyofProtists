knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(DESeq2)
library(apeglm)
library(magrittr)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(plyr)
library(scatterpie)
#setwd("02_Seasonal_Variation")
OTU_Table = as.data.frame(read.csv2("../00_Data/05_Cercozoa_Seasonal_OTU_Table_min-freq-7633_transposed_withMetadata.csv",header = T, fileEncoding="UTF-8-BOM"))
species = OTU_Table[,18:ncol(OTU_Table)]
species_mat = as.matrix(species)
SampleMetadata = as.matrix(OTU_Table[,1:17])
#first we convert our OTU table into a DESeq2 object
ddsSeason = DESeqDataSetFromMatrix(countData = t(species_mat),
colData = SampleMetadata,
design = ~ Season)
#Do the differential abundance analysis
ddsSeason = DESeq(ddsSeason,
minReplicatesForReplace = Inf, #This means that Outliers should not be excluded, we want the maximum amount of information
sfType="poscounts",
quiet = T)
#Convert the analysis into a "readable"" table
resSeason = results(ddsSeason, pAdjustMethod = "BH")
#Shrink the LFC (Log Fold Change)
#This shrinks the lfc into  a normal distribution, which is very handy for visualisations
resSeasonLFC = lfcShrink(ddsSeason,
type = "apeglm",
res = resSeason,
coef = "Season_Spring_vs_Autumn",
quiet = T)
#Only keep significant results
DESeq_Season_dependend_Subset = subset(resSeasonLFC,
resSeasonLFC$padj < 0.01 #highly significant pvalues less than 0.01
& abs(resSeasonLFC$log2FoldChange) >= 1) #OTUs highly differential abundant, with an absolute LFC greater than 1
#Convert into a data_bframe and sort by LFC
data_b = data.frame(DESeq_Season_dependend_Subset[order(DESeq_Season_dependend_Subset$log2FoldChange),]$log2FoldChange)
colnames(data_b) = "log2FoldChange"
#For the visualisation, the values are inverted so spring-correlated OTUs appear at the bottom and autumn-correlated OTUs at the top
data_b$log2FoldChange = data_b$log2FoldChange * -1
#Create empty matrices, one for the spring season and one for the autumn
SpringMatrix = matrix(numeric(0), 0,0)
AutumnMatrix = matrix(numeric(0), 0,0)
#Then we fill the matrices with the number of reads per OTU and Season
for (a in as.factor(rownames(data_b))){
a = get("a")
get("OTU_Table")
SpringMatrix[[a]] = sum(OTU_Table[[a]][OTU_Table$Season == "Spring"])
AutumnMatrix[[a]] = sum(OTU_Table[[a]][OTU_Table$Season == "Autumn"])
}
#Convert Matrices to data_bframes and add column names
AutumnMatrix = as.data.frame(AutumnMatrix, header = F)
SpringMatrix = as.data.frame(SpringMatrix, header = F)
colnames(AutumnMatrix) = "Autumn"
colnames(SpringMatrix) = "Spring"
#Add the new columns to our data_b
data_b = cbind(data_b, AutumnMatrix, SpringMatrix)
#We subset the data_b and keep only the LFC (which will be the y-coordinates in the plot) and the Autumn and Spring Columns
data_b = subset(data_b, select = c("log2FoldChange", "Autumn", "Spring"))
#We need to add an extra column for the x-coordinates in the plot, this is just a sequence from 1 to the number of OTUs
data_b$xPosition = seq(1:nrow(data_b))
P = data_b %>% #pipe the data_b into ggplot
arrange(data_b$log2FoldChange, decreasing = T) %>%
mutate(x = factor(rownames(data_b), rownames(data_b))) %>% #Define the OTUs as x-coordinates
ggplot(aes(x = x, y = data_b$log2FoldChange)) +  #x are the OTUs, y the LFC values
geom_segment(aes(x=x, xend=x,
y=0, yend = data_b$log2FoldChange),
size=1.5, alpha=0.9,
color = c(colorRampPalette(c("660033","#99004c"))(sum(data_b$log2FoldChange > 0)),
colorRampPalette(c("#02818a","#014636"))(sum(data_b$log2FoldChange < 0))),
position = position_dodge(width = 0.5)) +
theme_minimal(base_size = 5) +
theme(legend.position = "none",
panel.border = element_blank(),
axis.text.y = element_text(size = 14, vjust = 0.5, hjust = 0.5),
axis.text.x = element_text(size =12, angle = 90, vjust = 0.5, hjust = 0.5), degrees
axis.title = element_text(size=16, face = "bold", hjust = 0.5)) +
P = data_b %>% #pipe the data_b into ggplot
arrange(data_b$log2FoldChange, decreasing = T) %>%
mutate(x = factor(rownames(data_b), rownames(data_b))) %>% #Define the OTUs as x-coordinates
ggplot(aes(x = x, y = data_b$log2FoldChange)) +  #x are the OTUs, y the LFC values
geom_segment(aes(x=x, xend=x,
y=0, yend = data_b$log2FoldChange),
size=1.5, alpha=0.9,
color = c(colorRampPalette(c("660033","#99004c"))(sum(data_b$log2FoldChange > 0)),
colorRampPalette(c("#02818a","#014636"))(sum(data_b$log2FoldChange < 0))),
position = position_dodge(width = 0.5)) +
theme_minimal(base_size = 5) +
theme(legend.position = "none",
panel.border = element_blank(),
axis.text.y = element_text(size = 14, vjust = 0.5, hjust = 0.5),
axis.text.x = element_text(size =12, angle = 90, vjust = 0.5, hjust = 0.5),
axis.title = element_text(size=16, face = "bold", hjust = 0.5)) +
xlab("OTU") +
ylab("log2FoldChange") +
theme(axis.title.y = element_text(size = rel(1), angle = 90))+
theme(axis.title.x = element_text(size = rel(1), angle = 00))+
geom_label(x = 20, y = 6, label = "Autumn", label.padding = unit(0.8, "lines"), fill = "#660033", color = "white", size = 10) +
geom_label(x = 65, y = -6, label = "Spring", label.padding = unit(0.8, "lines"), fill = "#014636", color = "white", size = 10)+
geom_scatterpie(data = data_b,
aes(x = xPosition, y = log2FoldChange, r = 0.8),
cols = c("Autumn", "Spring"),
color = "darkgrey") +
scale_fill_manual(values=c("#660033", "#014636"))+
geom_hline(yintercept = 0, size = 0.5, linetype=1)+
theme(plot.margin = unit(c(1,1,1,1), "cm"))
P
P = data_b %>% #pipe the data_b into ggplot
arrange(data_b$log2FoldChange, decreasing = T) %>%
mutate(x = factor(rownames(data_b), rownames(data_b))) %>% #Define the OTUs as x-coordinates
ggplot(aes(x = x, y = data_b$log2FoldChange)) +  #x are the OTUs, y the LFC values
geom_segment(aes(x=x, xend=x,
y=0, yend = data_b$log2FoldChange),
size=1.5, alpha=0.9,
color = c(colorRampPalette(c("660033","#99004c"))(sum(data_b$log2FoldChange > 0)),
colorRampPalette(c("#02818a","#014636"))(sum(data_b$log2FoldChange < 0))),
position = position_dodge(width = 0.5)) +
theme_minimal(base_size = 5) +
theme(legend.position = "none",
panel.border = element_blank(),
axis.text.y = element_text(size = 14, vjust = 0.5, hjust = 0.5),
axis.text.x = element_text(size =12, angle = 90, vjust = 0.5, hjust = 0.5),
axis.title = element_text(size=16, face = "bold", hjust = 0.5)) +
xlab("OTU") +
ylab("log2FoldChange") +
theme(axis.title.y = element_text(size = rel(1), angle = 90))+
theme(axis.title.x = element_text(size = rel(1), angle = 00))+
geom_label(x = 20, y = 6, label = "Autumn", label.padding = unit(0.8, "lines"), fill = "#660033", color = "white", size = 10) +
geom_label(x = 65, y = -6, label = "Spring", label.padding = unit(0.8, "lines"), fill = "#014636", color = "white", size = 10)+
geom_scatterpie(data = data_b,
aes(x = xPosition, y = log2FoldChange, r = 0.8),
cols = c("Autumn", "Spring"),
color = "darkgrey") +
scale_fill_manual(values=c("#660033", "#014636"))+
geom_hline(yintercept = 0, size = 0.5, linetype=1)+
theme(plot.margin = unit(c(1,1,1,1), "cm"))
P
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(vegan)
library(plyr)
library(funrar)
library(ggplot2)
library(ggforce)
library(ggpubr)
OTU_Table = as.data.frame(read.csv2("../00_Data/05_Cercozoa_Seasonal_OTU_Table_min-freq-7633_transposed_withMetadata.csv",header = T))
#All
species = OTU_Table[,18:ncol(OTU_Table)]
species.mat = as.matrix(species)
species.mat = make_relative(species.mat)
SampleMetadata = as.data.frame(OTU_Table[,1:17])
#We need the Hellinger-transformed OTUs table with OTUs as columns and a table of metadata: Microhabitat, season and treespecies.
OTUCer.hel = decostand(species.mat, "hellinger")
#Ground
OTU_Ground <- OTU_Table[ which(OTU_Table$Stratum=='Ground'), ]
species.Ground = OTU_Ground[,18:ncol(OTU_Ground)]
species.mat.Ground = as.matrix(species.Ground)
species.mat.Ground = make_relative(species.mat.Ground)
SampleMetadata.Ground = as.data.frame(OTU_Ground[,1:17])
OTUCer.hel.Ground = decostand(species.mat.Ground, "hellinger")
#Canopy
OTU_Canopy <- OTU_Table[ which(OTU_Table$Stratum=='Canopy'), ]
species.Canopy = OTU_Canopy[,18:ncol(OTU_Canopy)]
species.mat.Canopy = as.matrix(species.Canopy)
species.mat.Canopy = make_relative(species.mat.Canopy)
SampleMetadata.Canopy = as.data.frame(OTU_Canopy[,1:17])
OTUCer.hel.Canopy = decostand(species.mat.Canopy, "hellinger")
#All
Cervarp.all <- varpart(OTUCer.hel, ~ Season, ~ Microhabitat, ~TreeSpecies, data = SampleMetadata)
#Ground
Cervarp.Ground <- varpart(OTUCer.hel.Ground, ~ Season, ~ Microhabitat, ~TreeSpecies, data = SampleMetadata.Ground)
#Canopy
Cervarp.Canopy <- varpart(OTUCer.hel.Canopy, ~ Season, ~ Microhabitat, ~TreeSpecies, data = SampleMetadata.Canopy)
#All
plot(Cervarp.all, digits = 1, Xnames = c('Season', 'Microhabitat', 'TreeSpecies'), bg = c('navy', 'tomato', 'green'))
#Ground
plot(Cervarp.Ground, digits =1, Xnames = c('Season', 'Microhabitat', 'TreeSpecies'), bg = c('navy', 'tomato', 'green'))
#Canopy
plot(Cervarp.Canopy, digits = 1, Xnames = c('Season', 'Microhabitat', 'TreeSpecies'), bg = c('navy', 'tomato', 'green'))
#create dummy dataframe
df.venn.all <- data.frame(x = c(3, 1, 2),y = c(1, 1,2.8),labels = c('Microhabitat\n0.32', 'Season\n0.01',"Tree species\n0.03"))
#Ground
df.venn.Ground<- data.frame(x = c(3, 1, 2),y = c(1, 1,2.8),labels = c('Microhabitat\n0.31', 'Season\n0.05',"Tree species\n0.02"))
#Canopy
df.venn.Canopy<- data.frame(x = c(3, 1, 2),y = c(1, 1,2.8),labels = c('Microhabitat\n0.18', 'Season\n0.02',"Tree species\n0.05"))
#Plot
#All
Varprat <- ggplot(df.venn.all, aes(x0 = x, y0 = y, r = 1.5, fill = labels)) +
geom_circle(alpha = .6, size = 1, colour = "#3f3a3a",show.legend = FALSE) +
coord_fixed()+
annotate("text", x = df.venn.all$x , y = df.venn.all$y,label=df.venn.all$labels ,size = 6) +
scale_fill_manual(values = c("#660033","#B5A642","#094d35")) +
theme_void()
#annotate("text", x = 2 , y =1,label="A and B" ,size = 4) +
#annotate("text", x = 1.35 , y =2,label="B and C" ,size = 4) +
#annotate("text", x = 2.7 , y =2,label="A and C" ,size = 4) +
#annotate("text", x = 2 , y =1.6,label="A and B and C" ,size = 2)+theme_void()
Varprat
#Ground
A <- ggplot(df.venn.Ground, aes(x0 = x, y0 = y, r = 1.5, fill = labels)) +
geom_circle(alpha = .6, size = 1, colour = "#3f3a3a",show.legend = FALSE) +
coord_fixed()+
annotate("text", x = df.venn.Ground$x , y = df.venn.Ground$y,label=df.venn.Ground$labels ,size = 6) +
scale_fill_manual(values = c("#82662a","#bea773","#daba73")) +
theme_void()
#annotate("text", x = 2 , y =1,label="A and B" ,size = 4) +
#annotate("text", x = 1.35 , y =2,label="B and C" ,size = 4) +
#annotate("text", x = 2.7 , y =2,label="A and C" ,size = 4) +
#annotate("text", x = 2 , y =1.6,label="A and B and C" ,size = 2)+theme_void()
A
#Canopy
B <- ggplot(df.venn.Canopy, aes(x0 = x, y0 = y, r = 1.5, fill = labels)) +
geom_circle(alpha = .6, size = 1, colour = "#3f3a3a",show.legend = FALSE) +
coord_fixed()+
annotate("text", x = df.venn.Canopy$x , y = df.venn.Canopy$y,label=df.venn.Canopy$labels ,size = 6) +
scale_fill_manual(values = c("#42614a","#61a072","#8fd7a2")) +
theme_void()
#annotate("text", x = 2 , y =1,label="A and B" ,size = 4) +
#annotate("text", x = 1.35 , y =2,label="B and C" ,size = 4) +
#annotate("text", x = 2.7 , y =2,label="A and C" ,size = 4) +
#annotate("text", x = 2 , y =1.6,label="A and B and C" ,size = 2)+theme_void()
B
